%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Rack Data Peak Charge - Onori Method with Fig4_5 Visualization
% Peak detection: Charge_Onori logic
% Visualization: fig_4_5 style
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clc; clear; close all;

%% Directory
dataDir = 'G:\공유 드라이브\Battery Software Lab\Projects\KEPCO_ATB_Lab\ESS_Data_Preprocessing\Rack_raw2mat\New\2024';
saveDir = fullfile('G:\공유 드라이브\Battery Software Lab\Projects\KEPCO_ATB_Lab\ESS_Data_Preprocessing\FieldData\FieldData_Rack_DCIR\DCIR_Charge_Onori_Fig4_5');
if ~exist(saveDir, 'dir')
    mkdir(saveDir);
end

%% For Kimje Daily Avg Temperature, you can load data from https://data.kma.go.kr/data/grnd/selectAsosRltmList.do?pgmNo=36

%% Parameters (same as Charge_Onori)
C_nom_cell = 128;
dt = 5;                   % Current monotonic increase interval
thr = C_nom_cell * 0.05;  % Initial current threshold (A)
dI =  C_nom_cell * 0.2;    % Current change threshold after 5s (A)
ddI = 1;                  % Continuous current increase threshold (A)

%% Data Collection (fig_4_5 style)
% Collect all peak data by month (like fig_4_5.m)
PeakChg_all.Time = [];
PeakChg_all.Current = [];
PeakChg_all.Voltage = [];
PeakChg_all.Temperature = [];
PeakChg_all.SoC = [];
PeakChg_all.Date = [];
PeakChg_all.R = [];
PeakChg_all.Month = [];

% Monthly data storage (like fig_4_5.m)
Peaks_monthly = struct();

% Process monthly folders
monthDirs = dir(fullfile(dataDir, '20*'));
for m = 1:length(monthDirs)
    if ~monthDirs(m).isdir, continue; end
    monthPath = fullfile(dataDir, monthDirs(m).name);
    matFiles = dir(fullfile(monthPath, '*.mat'));

    fprintf('Processing month: %s\n', monthDirs(m).name);
    fprintf('  Month number extracted: %s\n', monthDirs(m).name(5:6));
    % Extract month number for this month
    month_num = str2num(monthDirs(m).name(5:6));
    fprintf('  Extracted month_num: %d\n', month_num);
    for f = 1:length(matFiles)
        fprintf('Processing daily file: %s (%d/%d)\n', matFiles(f).name, f, length(matFiles));
        matFilePath = fullfile(monthPath, matFiles(f).name);
        load(matFilePath);

        % Extract data from Raw structure
        t = Raw.Date_Time_seconds;
        I = Raw.DCCurrent;
        V = Raw.CVavg;
        T_batt = Raw.MTavg;
        soc = Raw.SOC_BMS;

        % Ensure column vectors
        if isrow(t), t = t'; end
        if isrow(I), I = I'; end
        if isrow(V), V = V'; end
        if isrow(T_batt), T_batt = T_batt'; end
        if isrow(soc), soc = soc'; end

        N = length(I);

        % Auxiliary variable (fig_3.m style)
        te = 4;  % For 1s sampling

        % Filter on Current (fig_3.m style)
        I_filt = zeros(N,1);
        Pre = 0*ones(te/2,1);
        Post = 0*ones(te/2,1);
        I_calc = [Pre; I; Post];
        for i = 1:N
            for m = 0:te
                I_filt(i) = I_filt(i) + I_calc(i+m);
            end
            I_filt(i) = I_filt(i)/(te+1);
        end

        % Derivative of Current (fig_3.m style)
        for i = 1:length(I)-1
            dI_dt(i) = (I(i+1) - I(i)) / (t(i+1) - t(i));
        end

        % MA on Current Derivative (fig_3.m style)
        N_dI = length(dI_dt);
        filt_dI_dt = zeros(N_dI,1);
        Pre = 0*ones(te/2,1);
        Post = 0*ones(te/2,1);
        calc_dI_dt = [Pre; dI_dt'; Post];
        for i = 1:N_dI
            for m = 0:te
                filt_dI_dt(i) = filt_dI_dt(i) + calc_dI_dt(i+m);
            end
            filt_dI_dt(i) = filt_dI_dt(i)/(te+1);
        end

        % Driving Peaks Identification (fig_3.m style)
        PeakTime = {};
        PeakCurrent = {};
        PeakVoltage = {};
        PeakTemp = {};
        PeakSoC = {};
        z = 1;

        for i = 1:(length(I_filt)-dt)
            % Condition 1: Current increases sufficiently after dt seconds
            if (I_filt(i+dt) - I_filt(i)) > dI
                % Condition 2: Initial current near zero (Idle state)
                if I(i) > -thr && I(i) < thr
                    % Condition 3: Current also increases at next point
                    if (I_filt(i+1) - I_filt(i)) > ddI
                        flag = 1;
                        % Condition 4: Current continues to increase and positive for dt seconds
                        for zi = 1:dt
                            if filt_dI_dt(i+zi-1) < 0 || I(i+zi) < 0
                                flag = 0;
                            end
                        end
                        if flag == 1
                            % Additional condition: Check if current actually increased
                            if I(i+dt) > I(i) && I(i+dt) > 0
                                % Store event interval (fig_3.m style) - Column vectors
                                PeakTime{z} = t(i:i+dt-1);
                                PeakCurrent{z} = I(i:i+dt-1);
                                PeakVoltage{z} = V(i:i+dt-1);
                                PeakTemp{z} = T_batt(i:i+dt-1);
                                PeakSoC{z} = soc(i:i+dt-1);
                                z = z + 1;
                            end
                        end
                    end
                end
            end
        end

        % Resistance Computation (fig_3.m style)
        for i = 1:length(PeakTime)
            if isempty(PeakTime{i}), continue; end

            % Peak Chg DCIR calculation
            DV = (PeakVoltage{i}(end) - PeakVoltage{i}(1));
            DI = (PeakCurrent{i}(end) - PeakCurrent{i}(1));

            % Calculate Peak Chg DCIR only if current change exists and is not zero
            if DI > 0 && PeakCurrent{i}(end) > 0
                PeakChg_R_val = (DV / DI) * 1000;
            else
                PeakChg_R_val = NaN;
            end

            % Store peak data (fig_4_5 style)
            if ~isnan(PeakChg_R_val)
                % Find the actual peak start index in the original data
                peak_start_idx = find(t >= PeakTime{i}(1), 1);
                if isempty(peak_start_idx)
                    peak_start_idx = 1;  % Fallback
                end

                % Extract date from filename (Raw_YYYYMMDD.mat)
                [~, filename, ~] = fileparts(matFiles(f).name);
                date_str = filename(5:end);  % Remove 'Raw_' prefix
                file_date = datetime(date_str, 'InputFormat', 'yyyyMMdd');
                
                % Use file date for peak datetime
                peak_datetime = file_date;

                % Use month number already extracted for this month
                month_str = sprintf('Month_%02d', month_num);

                % Store in PeakChg_all (for overall data)
                PeakChg_all.Time = [PeakChg_all.Time PeakTime{i}(1)];
                PeakChg_all.Current = [PeakChg_all.Current PeakCurrent{i}(1)];
                PeakChg_all.Voltage = [PeakChg_all.Voltage PeakVoltage{i}(1)];
                PeakChg_all.Temperature = [PeakChg_all.Temperature mean(PeakTemp{i})];
                PeakChg_all.SoC = [PeakChg_all.SoC mean(PeakSoC{i})];
                PeakChg_all.Date = [PeakChg_all.Date peak_datetime];
                PeakChg_all.R = [PeakChg_all.R PeakChg_R_val];
                PeakChg_all.Month = [PeakChg_all.Month month_num];

                % Store in Peaks_monthly (like fig_4_5.m)
                if ~isfield(Peaks_monthly, month_str)
                    Peaks_monthly.(month_str).Time = [];
                    Peaks_monthly.(month_str).Current = [];
                    Peaks_monthly.(month_str).Voltage = [];
                    Peaks_monthly.(month_str).Temperature = [];
                    Peaks_monthly.(month_str).SoC = [];
                    Peaks_monthly.(month_str).Date = [];
                    Peaks_monthly.(month_str).R = [];
                end

                Peaks_monthly.(month_str).Time = [Peaks_monthly.(month_str).Time PeakTime{i}(1)];
                Peaks_monthly.(month_str).Current = [Peaks_monthly.(month_str).Current PeakCurrent{i}(1)];
                Peaks_monthly.(month_str).Voltage = [Peaks_monthly.(month_str).Voltage PeakVoltage{i}(1)];
                Peaks_monthly.(month_str).Temperature = [Peaks_monthly.(month_str).Temperature mean(PeakTemp{i})];
                Peaks_monthly.(month_str).SoC = [Peaks_monthly.(month_str).SoC mean(PeakSoC{i})];
                Peaks_monthly.(month_str).Date = [Peaks_monthly.(month_str).Date peak_datetime];
                Peaks_monthly.(month_str).R = [Peaks_monthly.(month_str).R PeakChg_R_val];

                fprintf('  Peak %d: R_PeakChg = %.2f mΩ, Month = %d, Date = %s\n', i, PeakChg_R_val, month_num, datestr(peak_datetime));
            end
        end

        fprintf('  Detected %d peaks in %s\n', length(PeakTime), matFiles(f).name);
        fprintf('  Month folder: %s, Month number: %d\n', monthDirs(m).name, month_num);
        clear Raw
    end
end

%% Remove outliers (fig_4_5 style)
if ~isempty(PeakChg_all.R)
    % Fit normal distribution
    pd = fitdist(PeakChg_all.R', 'Normal');
    out_max = pd.mu + 3*pd.sigma;
    out_min = pd.mu - 3*pd.sigma;

    % Remove outliers
    r = 1;
    while r <= length(PeakChg_all.R)
        if(PeakChg_all.R(r) > out_max || PeakChg_all.R(r) < out_min)
            f = fieldnames(PeakChg_all);
            for j = 1:length(f)
                PeakChg_all.(f{j})(r) = [];
            end
        else
            r = r + 1;
        end
    end

    % Refit distribution
    pd = fitdist(PeakChg_all.R', 'Normal');
end

%% Figure 4 - Monthly Histogram and Temperature vs Resistance (fig_4_5 style)
if ~isempty(PeakChg_all.R)
    % Debug: Print all data
    fprintf('Total peaks detected: %d\n', length(PeakChg_all.R));
    fprintf('Unique months in PeakChg_all.Month: %s\n', mat2str(unique(PeakChg_all.Month)));
    
    % Get monthly data from Peaks_monthly
    month_fields = fieldnames(Peaks_monthly);
    fprintf('Peaks_monthly fields: %s\n', strjoin(month_fields, ', '));
    
    % 1. Monthly histogram overlap (x-axis: resistance, y-axis: frequency)
    figure(1);
    hold on; box on;
    
    colors = lines(length(month_fields));
    
    for m_idx = 1:length(month_fields)
        month_field = month_fields{m_idx};
        month_R = Peaks_monthly.(month_field).R;
        
        fprintf('  %s: %d peaks\n', month_field, length(month_R));
        
        if ~isempty(month_R)
            h = histogram(month_R, 20, 'EdgeColor', colors(m_idx,:), 'FaceColor', colors(m_idx,:), 'FaceAlpha', 0.7);
            hold on;
        end
    end
    
    xlabel('R_{Peak}_{CHG} [m\Omega]'); ylabel('Frequency [-]');
    legend(month_fields, 'Interpreter', 'none');
    set(findall(gcf,'-property','FontSize'),'FontSize',20);
    set(findall(gcf,'-property','interpreter'),'interpreter','tex')
    set(findall(gcf,'-property','ticklabelinterpreter'),'ticklabelinterpreter','tex')
    title('Monthly Peak_{Chg} Distribution');
    
    % Save histogram
    saveas(gcf, fullfile(saveDir, 'R_Chg_Peak_Monthly_Histogram.fig'));
    
    % 2. Monthly temperature vs resistance (monthly values)
    figure(2);
    box on; hold on;
    
    % Create month labels for x-axis
    month_labels = {};
    valid_months = 0;
    
    % Collect monthly data for plotting
    monthly_x_pos = [];
    monthly_R_values = [];
    monthly_T_values = [];
    
    for m_idx = 1:length(month_fields)
        month_field = month_fields{m_idx};
        month_R = Peaks_monthly.(month_field).R;
        month_T = Peaks_monthly.(month_field).Temperature;
        
        fprintf('  Processing %s: %d peaks\n', month_field, length(month_R));
        
        if ~isempty(month_R)
            valid_months = valid_months + 1;
            % Extract month number from field name (e.g., 'Month_09' -> 9)
            month_num = str2num(month_field(7:8));
            month_labels{valid_months} = sprintf('2024-%02d', month_num);
            
            % Use month number as x-axis position
            x_pos = month_num;
            
            % Collect monthly data
            monthly_x_pos = [monthly_x_pos x_pos];
            monthly_R_values = [monthly_R_values month_R];
            monthly_T_values = [monthly_T_values month_T];
            
            fprintf('    Plotted %d points for month %d\n', length(month_R), month_num);
        end
    end
    
    % Plot monthly resistance values
    for m_idx = 1:length(month_fields)
        month_field = month_fields{m_idx};
        month_R = Peaks_monthly.(month_field).R;
        month_T = Peaks_monthly.(month_field).Temperature;
        
        if ~isempty(month_R)
            % Extract month number for x-axis position
            month_num = str2num(month_field(7:8));
            
            % Plot all resistance values for this month at the same x position
            x_positions = month_num * ones(size(month_R));
            scatter(x_positions, month_R, 100, month_T, 'filled', 'LineWidth', 2);
            hold on;
        end
    end
    
    % Left y-axis: Resistance values
    ylabel('R_{Peak}_{CHG} [m\Omega]'); ylim([0 2]);
    set(gca, 'YTick',(0:0.5:2)); set(gca,'YColor','k');
    
    % Set x-axis properties
    xlabel('Month');
    
    % Set x-axis to show months
    if ~isempty(monthly_x_pos)
        xticks(monthly_x_pos);
        xticklabels(month_labels);
        xtickangle(45);
        xlim([min(monthly_x_pos)-0.5 max(monthly_x_pos)+0.5]);
    end
    
    % Load monthly ambient temperature data (fig_4_5 style)
    ambTempPath = 'G:\공유 드라이브\BSL_Data2\한전_김제ESS\JeongEupSi_MonthlyAvg_AmbTemp.csv';
    if exist(ambTempPath, 'file')
        ambTempData = readtable(ambTempPath);
        fprintf('Loaded ambient temperature data: %d rows\n', height(ambTempData));
        
        % Extract year from the data (assume 2024 based on data directory)
        target_year = 2024;  % Based on dataDir path containing '2024'
        fprintf('Using year: %d for ambient temperature calculation\n', target_year);
        
        % Check CSV structure - rows are months, columns are years
        column_names = ambTempData.Properties.VariableNames;
        fprintf('CSV column names: %s\n', strjoin(column_names, ', '));
        fprintf('CSV structure: %d rows (months) x %d columns (years)\n', height(ambTempData), width(ambTempData));
        
        % Display first few rows to understand structure
        fprintf('First 5 rows of CSV:\n');
        disp(ambTempData(1:5, :));
        
        % Check if it's numeric
        fprintf('Data types:\n');
        for i = 1:width(ambTempData)
            col_name = ambTempData.Properties.VariableNames{i};
            col_data = ambTempData.(col_name);
            fprintf('  %s: %s\n', col_name, class(col_data));
        end
        
        % Try to find the correct column for 2024
        if target_year == 2023
            target_column = 'Var2';  % Second column is 2024
            fprintf('Using Var2 (second column) for 2024 data\n');
        elseif target_year == 2024
            target_column = 'Var3';  % Third column is 2024
            fprintf('Using Var3 (third column) for 2024 data\n');
        elseif target_year == 2025
            target_column = 'Var4';  % Fourth column is 2025
            fprintf('Using Var4 (fourth column) for 2025 data\n');
        end
        
        % Get temperature data from the target column (rows 2-13: Jan-Dec)
        monthly_temp_data = ambTempData.(target_column);
        % Get rows 2-13 (Jan-Dec) - skip year header
        monthly_temp_data = monthly_temp_data(2:13);
        % Convert to numeric and remove NaN values
        monthly_temp_data = double(monthly_temp_data);
        monthly_temp_data = monthly_temp_data(~isnan(monthly_temp_data));
        fprintf('Monthly ambient temperature data for %d: %s\n', target_year, mat2str(monthly_temp_data));
        
        % Debug: Print the raw data to see what we're getting
        fprintf('Raw monthly_temp_data from %s: %s\n', target_column, mat2str(ambTempData.(target_column)));
        fprintf('Selected rows 2-13: %s\n', mat2str(monthly_temp_data));
        
        % Use monthly average temperature data directly
        % Each month has one average temperature value
        interp_avgT = monthly_temp_data;
        
        fprintf('Monthly temperature data: %s\n', mat2str(interp_avgT));
        
    else
        fprintf('Warning: Ambient temperature file not found at %s\n', ambTempPath);
        interp_avgT = [];
    end
    
    % Right y-axis: Temperature
    yyaxis right;
    ylabel('Temperature [°C]');
    set(gca, 'YColor', 'b');
    % Set appropriate y-axis limits for ambient temperature
    ylim([0 30]);
    
    % Plot monthly ambient temperature
    % Plot monthly average temperature line with month labels
    temp_x_pos = monthly_x_pos;  % 실제 데이터에서 추출한 월들
    temp_y_values = interp_avgT(monthly_x_pos);  % 해당 월들의 온도값
    
    % Plot monthly average temperature line
    plot(temp_x_pos, temp_y_values, '-o', 'color', 'b', 'linewidth', 2, 'MarkerSize', 8, 'MarkerFaceColor', 'b');
    
    % Add debug info
    fprintf('Debug: valid_months = %d, month_labels = %s\n', valid_months, strjoin(month_labels, ', '));
    fprintf('Debug: monthly_x_pos range = [%d, %d]\n', min(monthly_x_pos), max(monthly_x_pos));
    
    % Calculate actual temperature range for colorbar
    all_temperatures = [];
    for m_idx = 1:length(month_fields)
        month_field = month_fields{m_idx};
        month_T = Peaks_monthly.(month_field).Temperature;
        all_temperatures = [all_temperatures month_T];
    end
    
    temp_min = min(all_temperatures);
    temp_max = max(all_temperatures);
    fprintf('Temperature range: %.1f to %.1f°C\n', temp_min, temp_max);
    
    colormap(flipud(autumn));
    c = colorbar('eastoutside', 'Position', [0.95,0.165,0.016,0.75], 'Limits', [temp_min temp_max]);
    c.Label.String = 'Temperature [°C]';
    title('Peak_{Chg} vs Month with Temperature');
    
    % Save time series
    saveas(gcf, fullfile(saveDir, 'Peak_Chg_Monthly_TimeSeries.fig'));
    
    fprintf('Figure 4 style visualization complete: %d peaks detected.\n', length(PeakChg_all.R));
    fprintf('Months with data: %s\n', strjoin(month_fields, ', '));
else
    fprintf('No peaks detected.\n');
end

%% Save results
fprintf('Saving results...\n');
save(fullfile(saveDir, 'PeakChg_all.mat'), 'PeakChg_all', 'Peaks_monthly');
fprintf('Processing complete\n');
fprintf('Results saved to: %s\n', saveDir);