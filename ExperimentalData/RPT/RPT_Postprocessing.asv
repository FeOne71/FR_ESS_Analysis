%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RPT Postprocessing - 항목별 Figure 생성 및 저장
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear; clc; close all;
warning off;

%% File Directory
folderPath = 'G:\공유 드라이브\BSL_Data2\한전_김제ESS\Experimental Data\RPT';
savePath   = 'G:\공유 드라이브\Battery Software Lab\0_Group Meeting\개인별_미팅자료\정철원\Experimental Data\RPT\RPT_Postprocessing';

channels = {'Ch9', 'Ch10', 'Ch11', 'Ch12', 'Ch13', 'Ch14', 'Ch15', 'Ch16'};
rpt_cycles = {'0cyc', '200cyc'};

%% 1. Static Capacity
fprintf('=== Static Capacity Processing ===\n');
staticCapacityFolder = fullfile(savePath, 'StaticCapacity');
if ~exist(staticCapacityFolder, 'dir')
    mkdir(staticCapacityFolder);
end

for ch_idx = 1:length(channels)
    channel = channels{ch_idx};
    figure('Name', sprintf('Static Capacity - %s', channel), 'Position', [100 100 1200 800]);
    set(gcf, 'Visible', 'off');
    
    % Static Capacity 조건: (stepidx, cycleidx) = (1,1), (1,3) - 충전, (3,1), (3,3) - 방전
    step_cycle_conditions = {[1,1], [1,3], [3,1], [3,3]}; % 충전, 충전, 방전, 방전
    condition_names = {'Charge RPT0', 'Charge RPT200', 'Discharge RPT0', 'Discharge RPT200'};
    colors = {'b', 'b--', 'r', 'r--'};
    
    hold on;
    legend_entries = {};
    
    for rpt_idx = 1:length(rpt_cycles)
        rpt_cycle = rpt_cycles{rpt_idx};
        filename = sprintf('%s_RPT_%s.csv', channel, rpt_cycle);
        filepath = fullfile(folderPath, filename);
        
        T = readtable(filepath);
        
        % 충전 (step 1)
        for cycle_idx = [1, 3]
            static_idx = (T{:,2} == 1) & (T{:,4} == cycle_idx);
            if sum(static_idx) > 0
                capacity_data = T{static_idx, 9};
                voltage_data = T{static_idx, 8};
                final_capacity = capacity_data(end);
                
                if cycle_idx == 1
                    if strcmp(rpt_cycle, '0cyc')
                        plot(capacity_data, voltage_data, 'b-', 'LineWidth', 2);
                        legend_entries{end+1} = sprintf('Charge RPT0 (Q=%.2f Ah)', final_capacity);
                    else
                        plot(capacity_data, voltage_data, 'b--', 'LineWidth', 2);
                        legend_entries{end+1} = sprintf('Charge RPT200 (Q=%.2f Ah)', final_capacity);
                    end
                else
                    if strcmp(rpt_cycle, '0cyc')
                        plot(capacity_data, voltage_data, 'r-', 'LineWidth', 2);
                        legend_entries{end+1} = sprintf('Discharge RPT0 (Q=%.2f Ah)', final_capacity);
                    else
                        plot(capacity_data, voltage_data, 'r--', 'LineWidth', 2);
                        legend_entries{end+1} = sprintf('Discharge RPT200 (Q=%.2f Ah)', final_capacity);
                    end
                end
            end
        end
        
        % 방전 (step 3)
        for cycle_idx = [1, 3]
            static_idx = (T{:,2} == 3) & (T{:,4} == cycle_idx);
            if sum(static_idx) > 0
                capacity_data = T{static_idx, 9};
                voltage_data = T{static_idx, 8};
                final_capacity = capacity_data(end);
                
                if cycle_idx == 1
                    if strcmp(rpt_cycle, '0cyc')
                        plot(capacity_data, voltage_data, 'g-', 'LineWidth', 2);
                        legend_entries{end+1} = sprintf('Discharge RPT0 (Q=%.2f Ah)', final_capacity);
                    else
                        plot(capacity_data, voltage_data, 'g--', 'LineWidth', 2);
                        legend_entries{end+1} = sprintf('Discharge RPT200 (Q=%.2f Ah)', final_capacity);
                    end
                else
                    if strcmp(rpt_cycle, '0cyc')
                        plot(capacity_data, voltage_data, 'm-', 'LineWidth', 2);
                        legend_entries{end+1} = sprintf('Discharge RPT0 (Q=%.2f Ah)', final_capacity);
                    else
                        plot(capacity_data, voltage_data, 'm--', 'LineWidth', 2);
                        legend_entries{end+1} = sprintf('Discharge RPT200 (Q=%.2f Ah)', final_capacity);
                    end
                end
            end
        end
    end
    
    xlabel('Capacity [Ah]');
    ylabel('Voltage [V]');
    title(sprintf('%s - Static Capacity', channel));
    legend(legend_entries, 'Location', 'best');
    grid on;
    xlim([0 70]);
    ylim([2.5 4.5]);
    
    % Save figure
    figName = fullfile(staticCapacityFolder, sprintf('%s_StaticCapacity.fig', channel));
    savefig(gcf, figName);
    fprintf('Saved: %s\n', figName);
end

%% 2. OCV
fprintf('\n=== OCV Processing ===\n');
ocvFolder = fullfile(folderPath, 'OCV');
if ~exist(ocvFolder, 'dir')
    mkdir(ocvFolder);
end

% OCV 조건: 충전 (8,2), 방전 (10,2)
ocv_conditions = {'charge', 'discharge'};
ocv_steps = [8, 10];

for ch_idx = 1:length(channels)
    channel = channels{ch_idx};
    
    % Figure 1: Individual channel OCV
    figure('Name', sprintf('OCV - %s', channel), 'Position', [100 100 1200 800]);
    set(gcf, 'Visible', 'off');
    
    for rpt_idx = 1:length(rpt_cycles)
        rpt_cycle = rpt_cycles{rpt_idx};
        filename = sprintf('%s_RPT_%s.csv', channel, rpt_cycle);
        filepath = fullfile(folderPath, filename);
        
        T = readtable(filepath);
        
        subplot(2,1,rpt_idx);
        hold on;
        
        charge_ocv = [];
        discharge_ocv = [];
        
        for ocv_idx = 1:length(ocv_conditions)
            step_idx = ocv_steps(ocv_idx);
            ocv_data = (T{:,2} == step_idx) & (T{:,4} == 2);
            
            capacity_data = T{ocv_data, 9};
            voltage_data = T{ocv_data, 8};
            
            % Capacity를 0~100으로 등분 (101개)
            soc_data = linspace(0, 100, 101);
            
            % 방전 OCV는 순서를 뒤집어서 SOC 증가에 따라 전압이 증가하도록
            if strcmp(ocv_conditions{ocv_idx}, 'discharge')
                voltage_data = flipud(voltage_data);
            end
            
            % voltage_data를 soc_data 길이에 맞춰 보간
            voltage_interp = interp1(linspace(0, 100, length(voltage_data)), voltage_data, soc_data, 'linear');
            
            if strcmp(ocv_conditions{ocv_idx}, 'charge')
                charge_ocv = voltage_interp;
                plot(soc_data, voltage_interp, 'b-', 'LineWidth', 2, 'DisplayName', 'Charge');
            else
                discharge_ocv = voltage_interp;
                plot(soc_data, voltage_interp, 'r-', 'LineWidth', 2, 'DisplayName', 'Discharge');
            end
        end
        
        % 충방전 평균 OCV 계산 및 표시
        if ~isempty(charge_ocv) && ~isempty(discharge_ocv)
            avg_ocv = (charge_ocv + discharge_ocv) / 2;
            plot(soc_data, avg_ocv, 'g-', 'LineWidth', 2, 'DisplayName', 'Average');
        end
        
        xlabel('SOC [%]');
        ylabel('Voltage [V]');
        title(sprintf('%s - %s OCV', channel, rpt_cycle));
        legend('Location', 'best');
        grid on;
        xlim([0 100]);
    end
    
    % Save figure
    figName = fullfile(ocvFolder, sprintf('%s_OCV.fig', channel));
    savefig(gcf, figName);
    fprintf('Saved: %s\n', figName);
end

% Figure 2: Average OCV across all channels
figure('Name', 'Average OCV', 'Position', [100 100 800 600]);
hold on;

all_ocv_data = [];
for ch_idx = 1:length(channels)
    channel = channels{ch_idx};
    
    for rpt_idx = 1:length(rpt_cycles)
        rpt_cycle = rpt_cycles{rpt_idx};
        filename = sprintf('%s_RPT_%s.csv', channel, rpt_cycle);
        filepath = fullfile(folderPath, filename);
        
        T = readtable(filepath);
        
        % Combine charge and discharge OCV
        for ocv_idx = 1:length(ocv_conditions)
            step_idx = ocv_steps(ocv_idx);
            ocv_data = (T{:,2} == step_idx) & (T{:,4} == 2);
            
            capacity_data = T{ocv_data, 9};
            voltage_data = T{ocv_data, 8};
            
            % Capacity를 0~100으로 등분
            soc_data = linspace(0, 100, length(capacity_data));
            
            % 방전 OCV는 순서를 뒤집어서 SOC 증가에 따라 전압이 증가하도록
            if strcmp(ocv_conditions{ocv_idx}, 'discharge')
                voltage_data = flipud(voltage_data);
            end
            
            % Interpolate to common SOC grid
            soc_grid = 0:1:100;
            voltage_interp = interp1(soc_data, voltage_data, soc_grid, 'linear');
            all_ocv_data = [all_ocv_data; voltage_interp];
        end
    end
end

% Calculate average OCV
avg_ocv = mean(all_ocv_data, 1, 'omitnan');
soc_grid = 0:1:100;

% Grid와 전압을 모두 오름차순으로 정렬
[soc_grid_sorted, sort_idx] = sort(soc_grid);
avg_ocv_sorted = avg_ocv(sort_idx);

plot(soc_grid_sorted, avg_ocv_sorted, 'b-', 'LineWidth', 3);
xlabel('SOC [%]');
ylabel('Voltage [V]');
title('Average OCV (All Channels)');
grid on;
xlim([0 100]);

% Save average OCV
figName = fullfile(ocvFolder, 'Average_OCV.fig');
savefig(gcf, figName);
fprintf('Saved: %s\n', figName);

% Create OCV function with sorted data
OCV_func = @(soc_query) interp1(soc_grid_sorted, avg_ocv_sorted, soc_query, 'linear');

%% 3. DCIR
fprintf('\n=== DCIR Processing ===\n');
dcirFolder = fullfile(folderPath, 'DCIR');
if ~exist(dcirFolder, 'dir')
    mkdir(dcirFolder);
end

% DCIR time points
dcir_times = [0.1, 1, 3, 5, 10, 30, 50]; % seconds

% DCIR conditions
dcir_charge = [14, 2:17]; % step, cycles
dcir_discharge = [21, 16:30]; % step, cycles

for ch_idx = 1:length(channels)
    channel = channels{ch_idx};
    
    % Figure 1: DCIR values over time
    figure('Name', sprintf('DCIR - %s', channel), 'Position', [100 100 1200 800]);
    set(gcf, 'Visible', 'off');
    
    for rpt_idx = 1:length(rpt_cycles)
        rpt_cycle = rpt_cycles{rpt_idx};
        filename = sprintf('%s_RPT_%s.csv', channel, rpt_cycle);
        filepath = fullfile(folderPath, filename);
        
        T = readtable(filepath);
        
        subplot(2,1,rpt_idx);
        hold on;
        
        % Charge DCIR
        charge_idx = (T{:,2} == dcir_charge(1)) & ismember(T{:,4}, dcir_charge(2:end));
        voltage_data = T{charge_idx, 8};
        current_data = T{charge_idx, 7};
        dcir_charge_values = abs(voltage_data ./ current_data);
        if ~isempty(dcir_charge_values)
            plot_len = min(length(dcir_times), length(dcir_charge_values));
            plot(dcir_times(1:plot_len), dcir_charge_values(1:plot_len), 'b-o', 'LineWidth', 2, 'DisplayName', 'Charge');
        end
        
        % Discharge DCIR
        discharge_idx = (T{:,2} == dcir_discharge(1)) & ismember(T{:,4}, dcir_discharge(2:end));
        voltage_data = T{discharge_idx, 8};
        current_data = T{discharge_idx, 7};
        dcir_discharge_values = abs(voltage_data ./ current_data);
        if ~isempty(dcir_discharge_values)
            plot_len = min(length(dcir_times), length(dcir_discharge_values));
            plot(dcir_times(1:plot_len), dcir_discharge_values(1:plot_len), 'r-s', 'LineWidth', 2, 'DisplayName', 'Discharge');
        end
        
        xlabel('Time [s]');
        ylabel('DCIR [Ω]');
        title(sprintf('%s - %s DCIR', channel, rpt_cycle));
        legend('Location', 'best');
        grid on;
    end
    
    % Save figure
    figName = fullfile(dcirFolder, sprintf('%s_DCIR.fig', channel));
    savefig(gcf, figName);
    fprintf('Saved: %s\n', figName);
end

%% 4. C-rate
fprintf('\n=== C-rate Processing ===\n');
crateFolder = fullfile(folderPath, 'C_rate');
if ~exist(crateFolder, 'dir')
    mkdir(crateFolder);
end

% C-rate conditions - 각 채널별 cycle idx
crate_charge_0cyc = {[28,30], [32,30], [36,30], [40,30], [44,30]}; % 0cyc 충전
crate_discharge_0cyc = {[48,32], [52,32], [56,32], [60,32], [64,32]}; % 0cyc 방전

% 200cyc는 대부분 30, 일부 채널만 다름
crate_charge_200cyc = {[28,30], [32,30], [36,30], [40,30], [44,30]}; % 200cyc 충전 (기본)
crate_discharge_200cyc = {[48,30], [52,30], [56,30], [60,30], [64,30]}; % 200cyc 방전 (기본)

% 특별한 채널들 
ch9_200cyc_charge = {[28,31], [32,31], [36,31], [40,31], [44,31]};
ch9_200cyc_discharge = {[48,31], [52,31], [56,31], [60,31], [64,31]};

ch15_200cyc_charge = {[28,31], [32,31], [36,31], [40,31], [44,31]};
ch15_200cyc_discharge = {[48,31], [52,31], [56,31], [60,31], [64,31]};

ch16_0cyc_charge   = {[28,32], [32,32], [36,32], [40,32], [44,32]};
ch16_0cyc_discharge = {[48,32], [52,32], [56,32], [60,32], [64,32]};


ch16_200cyc_discharge = {[48,30], [52,30], [56,30], [60,30], [64,30]};

crate_names = {'0.1C', '0.5C', '1C', '2C', '3C'};

for ch_idx = 1:length(channels)
    channel = channels{ch_idx};
    
    figure('Name', sprintf('C-rate - %s', channel), 'Position', [100 100 1200 800]);
    set(gcf, 'Visible', 'off');
    
    for rpt_idx = 1:length(rpt_cycles)
        rpt_cycle = rpt_cycles{rpt_idx};
        filename = sprintf('%s_RPT_%s.csv', channel, rpt_cycle);
        filepath = fullfile(folderPath, filename);
        
        T = readtable(filepath);
        
        subplot(2,1,rpt_idx);
        hold on;
        
        % 0cyc와 200cyc에 따라 다른 cycle idx 사용
        if strcmp(rpt_cycle, '0cyc')
            charge_conditions = crate_charge_0cyc;
            discharge_conditions = crate_discharge_0cyc;
        else % 200cyc
            if strcmp(channel, 'Ch9')
                charge_conditions = ch9_200cyc_charge;
                discharge_conditions = ch9_200cyc_discharge;
            elseif strcmp(channel, 'Ch15')
                charge_conditions = ch15_200cyc_charge;
                discharge_conditions = ch15_200cyc_discharge;
            else
                charge_conditions = crate_charge_200cyc;
                discharge_conditions = crate_discharge_200cyc;
            end
        end
        
        % Charge C-rate
        for crate_idx = 1:length(charge_conditions)
            step_cycle = charge_conditions{crate_idx};
            crate_idx_data = (T{:,2} == step_cycle(1)) & (T{:,4} == step_cycle(2));
            
            if sum(crate_idx_data) > 0
                capacity_data = T{crate_idx_data, 9};
                voltage_data = T{crate_idx_data, 8};
                plot(capacity_data, voltage_data, 'LineWidth', 2, 'DisplayName', sprintf('Charge %s', crate_names{crate_idx}));
            end
        end
        
        % Discharge C-rate
        for crate_idx = 1:length(discharge_conditions)
            step_cycle = discharge_conditions{crate_idx};
            crate_idx_data = (T{:,2} == step_cycle(1)) & (T{:,4} == step_cycle(2));
            
            if sum(crate_idx_data) > 0
                capacity_data = T{crate_idx_data, 9};
                voltage_data = T{crate_idx_data, 8};
                plot(capacity_data, voltage_data, '--', 'LineWidth', 2, 'DisplayName', sprintf('    Discharge %s', crate_names{crate_idx}));
            end
        end
        
        xlabel('Capacity [Ah]');
        ylabel('Voltage [V]');
        title(sprintf('%s - %s C-rate', channel, rpt_cycle));
        legend('Location', 'best');
        grid on;
    end
    
    % Save figure
    figName = fullfile(crateFolder, sprintf('%s_Crate.fig', channel));
    savefig(gcf, figName);
    fprintf('Saved: %s\n', figName);
end

%% 5. dQdV
fprintf('\n=== dQdV Processing ===\n');
dqdvFolder = fullfile(savePath, 'dQdV');
if ~exist(dqdvFolder, 'dir')
    mkdir(dqdvFolder);
end

for ch_idx = 1:length(channels)
    channel = channels{ch_idx};
    
    figure('Name', sprintf('dQdV - %s', channel), 'Position', [100 100 1200 800]);
    
    for rpt_idx = 1:length(rpt_cycles)
        rpt_cycle = rpt_cycles{rpt_idx};
        filename = sprintf('%s_RPT_%s.csv', channel, rpt_cycle);
        filepath = fullfile(folderPath, filename);
        
        T = readtable(filepath);
        
        subplot(2,1,rpt_idx);
        hold on;
        
        % 각 채널별 SOC-OCV 평균 계산
        charge_ocv = [];
        discharge_ocv = [];
        
        for ocv_idx = 1:length(ocv_conditions)
            step_idx = ocv_steps(ocv_idx);
            ocv_data = (T{:,2} == step_idx) & (T{:,4} == 2);
            
            capacity_data = T{ocv_data, 9};
            voltage_data = T{ocv_data, 8};
            
            % Capacity를 0~100으로 등분 (101개)
            soc_data = linspace(0, 100, 101);
            
            % 방전 OCV는 순서를 뒤집어서 SOC 증가에 따라 전압이 증가하도록
            if strcmp(ocv_conditions{ocv_idx}, 'discharge')
                voltage_data = flipud(voltage_data);
            end
            
            % voltage_data를 soc_data 길이에 맞춰 보간
            voltage_interp = interp1(linspace(0, 100, length(voltage_data)), voltage_data, soc_data, 'linear');
            
            if strcmp(ocv_conditions{ocv_idx}, 'charge')
                charge_ocv = voltage_interp;
            else
                discharge_ocv = voltage_interp;
            end
        end
        
        % 충방전 평균 OCV 계산
        if ~isempty(charge_ocv) && ~isempty(discharge_ocv)
            avg_ocv = (charge_ocv + discharge_ocv) / 2;
            
            % dQdV 계산 (전압 변화에 따른 용량 변화율)
            dqdv = diff(avg_ocv) ./ diff(soc_data) * 1000; % mAh/V 단위
            voltage_center = (avg_ocv(1:end-1) + avg_ocv(2:end)) / 2; % 중간값
            
            plot(voltage_center, dqdv, 'LineWidth', 2, 'DisplayName', 'dQdV');
        end
        
        xlabel('Voltage [V]');
        ylabel('dQdV [mAh/V]');
        title(sprintf('%s - %s dQdV', channel, rpt_cycle));
        legend('Location', 'best');
        grid on;
    end
    
    % Save figure
    figName = fullfile(dqdvFolder, sprintf('%s_dQdV.fig', channel));
    savefig(gcf, figName);
    fprintf('Saved: %s\n', figName);
end

%% Save all data to mat file
fprintf('\n=== Saving to MAT file ===\n');
matFileName = fullfile(folderPath, 'RPT_processed_data.mat');

% Create structure to save all processed data
RPT_data = struct();
RPT_data.channels = channels;
RPT_data.rpt_cycles = rpt_cycles;
RPT_data.ocv_function = OCV_func;
RPT_data.processing_date = datestr(now);

save(matFileName, 'RPT_data');
fprintf('Saved: %s\n', matFileName);

fprintf('\n=== RPT Postprocessing Completed ===\n');